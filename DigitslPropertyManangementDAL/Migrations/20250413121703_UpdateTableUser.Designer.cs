// <auto-generated />
using System;
using GP_DigitalPropertyManegmentApi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitslPropertyManangementDAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413121703_UpdateTableUser")]
    partial class UpdateTableUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityProperty", b =>
                {
                    b.Property<int>("AmenitiesAmenityId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesAmenityId", "PropertiesPropertyId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("AmenityProperty");
                });

            modelBuilder.Entity("DigitalPropertyManagmentApi.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("BotResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FavoriteId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"));

                    b.Property<string>("PreferenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Furnished")
                        .HasColumnType("bit");

                    b.Property<string>("Governate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("ListedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Cairo",
                            Description = "A spacious apartment in the heart of Cairo.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.0444,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2815),
                            Longitude = 31.235700000000001,
                            Price = 5000.0,
                            PropertyType = "Apartment",
                            Size = 120.0,
                            Status = "Available",
                            Street = "Downtown Street",
                            Title = "Luxury Apartment in Cairo"
                        },
                        new
                        {
                            PropertyId = 2,
                            Bathrooms = 4,
                            Bedrooms = 5,
                            City = "Giza",
                            Description = "A luxurious villa with a private pool.",
                            Furnished = false,
                            Governate = "Giza",
                            IsAvailable = true,
                            Latitude = 29.976500000000001,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2821),
                            Longitude = 31.1313,
                            Price = 15000.0,
                            PropertyType = "Villa",
                            Size = 300.0,
                            Status = "Available",
                            Street = "6th October Road",
                            Title = "Modern Villa with Pool"
                        },
                        new
                        {
                            PropertyId = 3,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            City = "Alexandria",
                            Description = "A modern studio apartment with a sea view.",
                            Furnished = true,
                            Governate = "Alexandria",
                            IsAvailable = true,
                            Latitude = 31.200099999999999,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2824),
                            Longitude = 29.918700000000001,
                            Price = 3000.0,
                            PropertyType = "Studio",
                            Size = 50.0,
                            Status = "Available",
                            Street = "Corniche Street",
                            Title = "Beachfront Studio"
                        },
                        new
                        {
                            PropertyId = 4,
                            Bathrooms = 3,
                            Bedrooms = 4,
                            City = "Mansoura",
                            Description = "A comfortable house located in a quiet area.",
                            Furnished = false,
                            Governate = "Dakahlia",
                            IsAvailable = false,
                            Latitude = 31.0364,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2827),
                            Longitude = 31.380700000000001,
                            Price = 6000.0,
                            PropertyType = "House",
                            Size = 180.0,
                            Status = "Pending",
                            Street = "Shobra Street",
                            Title = "Cozy House in Mansoura"
                        },
                        new
                        {
                            PropertyId = 5,
                            Bathrooms = 4,
                            Bedrooms = 4,
                            City = "Cairo",
                            Description = "A high-end penthouse with a rooftop terrace.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.0489,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2861),
                            Longitude = 31.3462,
                            Price = 20000.0,
                            PropertyType = "Penthouse",
                            Size = 250.0,
                            Status = "Available",
                            Street = "Nasr City Main Road",
                            Title = "Luxury Penthouse in Nasr City"
                        },
                        new
                        {
                            PropertyId = 6,
                            Bathrooms = 1,
                            Bedrooms = 2,
                            City = "Giza",
                            Description = "A budget-friendly apartment near public transportation.",
                            Furnished = false,
                            Governate = "Giza",
                            IsAvailable = true,
                            Latitude = 29.9876,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2866),
                            Longitude = 31.2134,
                            Price = 2500.0,
                            PropertyType = "Apartment",
                            Size = 90.0,
                            Status = "Available",
                            Street = "Faisal Street",
                            Title = "Affordable Apartment in Giza"
                        },
                        new
                        {
                            PropertyId = 7,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            City = "Alexandria",
                            Description = "A small, fully furnished studio in Alexandria.",
                            Furnished = true,
                            Governate = "Alexandria",
                            IsAvailable = true,
                            Latitude = 31.215599999999998,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2871),
                            Longitude = 29.955300000000001,
                            Price = 3500.0,
                            PropertyType = "Studio",
                            Size = 40.0,
                            Status = "Available",
                            Street = "Stanley Bridge",
                            Title = "Furnished Studio in Alexandria"
                        },
                        new
                        {
                            PropertyId = 8,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            City = "Cairo",
                            Description = "A stylish duplex in Maadi with garden access.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.008099999999999,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2874),
                            Longitude = 31.230599999999999,
                            Price = 10000.0,
                            PropertyType = "Duplex",
                            Size = 200.0,
                            Status = "Available",
                            Street = "Maadi Corniche",
                            Title = "Elegant Duplex in Maadi"
                        },
                        new
                        {
                            PropertyId = 9,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Tanta",
                            Description = "A simple house at an affordable price.",
                            Furnished = false,
                            Governate = "Gharbia",
                            IsAvailable = true,
                            Latitude = 30.788499999999999,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2877),
                            Longitude = 31.001899999999999,
                            Price = 4000.0,
                            PropertyType = "House",
                            Size = 160.0,
                            Status = "Available",
                            Street = "Tanta Main Road",
                            Title = "Budget-Friendly House in Tanta"
                        },
                        new
                        {
                            PropertyId = 10,
                            Bathrooms = 5,
                            Bedrooms = 6,
                            City = "Hurghada",
                            Description = "A premium villa with private beach access.",
                            Furnished = true,
                            Governate = "Red Sea",
                            IsAvailable = true,
                            Latitude = 27.257899999999999,
                            ListedAt = new DateTime(2025, 4, 13, 12, 17, 2, 765, DateTimeKind.Utc).AddTicks(2880),
                            Longitude = 33.811599999999999,
                            Price = 25000.0,
                            PropertyType = "Villa",
                            Size = 400.0,
                            Status = "Available",
                            Street = "Sahl Hasheesh",
                            Title = "Luxury Beachfront Villa in Hurghada"
                        });
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.PropertyImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertiesImages");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BirthOfDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTermsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NotificationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyDocument", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyDocuments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyFavorite", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyFavorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyPayment", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyPayments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyReview", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserPropertyReviews");
                });

            modelBuilder.Entity("AmenityProperty", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.ChatMessage", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Preference", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.PropertyImage", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.SearchHistory", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyDocument", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Document", "Document")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyFavorite", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", "Favorite")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("FavoriteId");

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyPayment", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Payment", "Payment")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyReview", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPropertyManagmentApi.Models.Review", "Review")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("ReviewId");

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalPropertyManagmentApi.Models.Review", b =>
                {
                    b.Navigation("UserPropertyReviews");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Document", b =>
                {
                    b.Navigation("UserPropertyDocuments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", b =>
                {
                    b.Navigation("UserPropertyFavorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Payment", b =>
                {
                    b.Navigation("UserPropertyPayments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("UserPropertyDocuments");

                    b.Navigation("UserPropertyFavorites");

                    b.Navigation("UserPropertyPayments");

                    b.Navigation("UserPropertyReviews");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Preferences");

                    b.Navigation("SearchHistories");

                    b.Navigation("UserPropertyDocuments");

                    b.Navigation("UserPropertyFavorites");

                    b.Navigation("UserPropertyPayments");

                    b.Navigation("UserPropertyReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
