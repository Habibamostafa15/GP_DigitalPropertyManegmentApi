// <auto-generated />
using System;
using GP_DigitalPropertyManegmentApi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitslPropertyManangementDAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422201107_updateSeededProperties")]
    partial class updateSeededProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityProperty", b =>
                {
                    b.Property<int>("AmenitiesAmenityId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesAmenityId", "PropertiesPropertyId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("AmenityProperty");
                });

            modelBuilder.Entity("DigitalPropertyManagmentApi.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DigitslPropertyManangementDAL.Data.Models.AccessibillityAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessibillityAmenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wheelchair Ramp"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Elevator Access"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wide Hallways"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Grab Bars"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Accessible Parking"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lowered Counters"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Voice Control System"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Automatic Doors"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Visual Alerts"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Braille Signage"
                        });
                });

            modelBuilder.Entity("DigitslPropertyManangementDAL.Data.Models.ExternalAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExternalAmenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Garden"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Playground"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Roof Access"
                        },
                        new
                        {
                            Id = 9,
                            Name = "BBQ Area"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sports Court"
                        });
                });

            modelBuilder.Entity("DigitslPropertyManangementDAL.Data.Models.InternalAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InternalAmenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Central Heating"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fireplace"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Laundry Room"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Walk-in Closet"
                        },
                        new
                        {
                            Id = 6,
                            Name = "High-Speed Internet"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Smart Home System"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Modern Kitchen"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hardwood Floors"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Soundproof Walls"
                        });
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("BotResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FavoriteId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"));

                    b.Property<string>("PreferenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Furnished")
                        .HasColumnType("bit");

                    b.Property<string>("Governate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("ListedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Cairo",
                            Description = "A spacious apartment in the heart of Cairo.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.0444,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4813),
                            ListingType = "sale",
                            Longitude = 31.235700000000001,
                            Price = 5000.0,
                            PropertyType = "Apartment",
                            Size = 120.0,
                            Status = "Available",
                            Street = "Downtown Street",
                            Title = "Luxury Apartment in Cairo",
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 2,
                            Bathrooms = 4,
                            Bedrooms = 5,
                            City = "Giza",
                            Description = "A luxurious villa with a private pool.",
                            Furnished = false,
                            Governate = "Giza",
                            IsAvailable = true,
                            Latitude = 29.976500000000001,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4819),
                            ListingType = "rent",
                            Longitude = 31.1313,
                            Price = 15000.0,
                            PropertyType = "Villa",
                            Size = 300.0,
                            Status = "Available",
                            Street = "6th October Road",
                            Title = "Modern Villa with Pool",
                            UserId = 2
                        },
                        new
                        {
                            PropertyId = 3,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            City = "Alexandria",
                            Description = "A modern studio apartment with a sea view.",
                            Furnished = true,
                            Governate = "Alexandria",
                            IsAvailable = true,
                            Latitude = 31.200099999999999,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4824),
                            ListingType = "sale",
                            Longitude = 29.918700000000001,
                            Price = 3000.0,
                            PropertyType = "Studio",
                            Size = 50.0,
                            Status = "Available",
                            Street = "Corniche Street",
                            Title = "Beachfront Studio",
                            UserId = 3
                        },
                        new
                        {
                            PropertyId = 4,
                            Bathrooms = 3,
                            Bedrooms = 4,
                            City = "Mansoura",
                            Description = "A comfortable house located in a quiet area.",
                            Furnished = false,
                            Governate = "Dakahlia",
                            IsAvailable = false,
                            Latitude = 31.0364,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4827),
                            ListingType = "sale",
                            Longitude = 31.380700000000001,
                            Price = 6000.0,
                            PropertyType = "House",
                            Size = 180.0,
                            Status = "Pending",
                            Street = "Shobra Street",
                            Title = "Cozy House in Mansoura",
                            UserId = 4
                        },
                        new
                        {
                            PropertyId = 5,
                            Bathrooms = 4,
                            Bedrooms = 4,
                            City = "Cairo",
                            Description = "A high-end penthouse with a rooftop terrace.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.0489,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4830),
                            ListingType = "rent",
                            Longitude = 31.3462,
                            Price = 20000.0,
                            PropertyType = "Penthouse",
                            Size = 250.0,
                            Status = "Available",
                            Street = "Nasr City Main Road",
                            Title = "Luxury Penthouse in Nasr City",
                            UserId = 5
                        },
                        new
                        {
                            PropertyId = 6,
                            Bathrooms = 1,
                            Bedrooms = 2,
                            City = "Giza",
                            Description = "A budget-friendly apartment near public transportation.",
                            Furnished = false,
                            Governate = "Giza",
                            IsAvailable = true,
                            Latitude = 29.9876,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4834),
                            ListingType = "rent",
                            Longitude = 31.2134,
                            Price = 2500.0,
                            PropertyType = "Apartment",
                            Size = 90.0,
                            Status = "Available",
                            Street = "Faisal Street",
                            Title = "Affordable Apartment in Giza",
                            UserId = 6
                        },
                        new
                        {
                            PropertyId = 7,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            City = "Alexandria",
                            Description = "A small, fully furnished studio in Alexandria.",
                            Furnished = true,
                            Governate = "Alexandria",
                            IsAvailable = true,
                            Latitude = 31.215599999999998,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4837),
                            ListingType = "sale",
                            Longitude = 29.955300000000001,
                            Price = 3500.0,
                            PropertyType = "Studio",
                            Size = 40.0,
                            Status = "Available",
                            Street = "Stanley Bridge",
                            Title = "Furnished Studio in Alexandria",
                            UserId = 7
                        },
                        new
                        {
                            PropertyId = 8,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            City = "Cairo",
                            Description = "A stylish duplex in Maadi with garden access.",
                            Furnished = true,
                            Governate = "Cairo",
                            IsAvailable = true,
                            Latitude = 30.008099999999999,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4840),
                            ListingType = "rent",
                            Longitude = 31.230599999999999,
                            Price = 10000.0,
                            PropertyType = "Duplex",
                            Size = 200.0,
                            Status = "Available",
                            Street = "Maadi Corniche",
                            Title = "Elegant Duplex in Maadi",
                            UserId = 8
                        },
                        new
                        {
                            PropertyId = 9,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Tanta",
                            Description = "A simple house at an affordable price.",
                            Furnished = false,
                            Governate = "Gharbia",
                            IsAvailable = true,
                            Latitude = 30.788499999999999,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4874),
                            ListingType = "sale",
                            Longitude = 31.001899999999999,
                            Price = 4000.0,
                            PropertyType = "House",
                            Size = 160.0,
                            Status = "Available",
                            Street = "Tanta Main Road",
                            Title = "Budget-Friendly House in Tanta",
                            UserId = 9
                        },
                        new
                        {
                            PropertyId = 10,
                            Bathrooms = 5,
                            Bedrooms = 6,
                            City = "Hurghada",
                            Description = "A premium villa with private beach access.",
                            Furnished = true,
                            Governate = "Red Sea",
                            IsAvailable = true,
                            Latitude = 27.257899999999999,
                            ListedAt = new DateTime(2025, 4, 22, 20, 11, 6, 651, DateTimeKind.Utc).AddTicks(4879),
                            ListingType = "rent",
                            Longitude = 33.811599999999999,
                            Price = 25000.0,
                            PropertyType = "Villa",
                            Size = 400.0,
                            Status = "Available",
                            Street = "Sahl Hasheesh",
                            Title = "Luxury Beachfront Villa in Hurghada",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.PropertyImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertiesImages");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BirthOfDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTermsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NotificationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyDocument", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyDocuments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyFavorite", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyFavorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyPayment", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyPayments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyReview", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserPropertyReviews");
                });

            modelBuilder.Entity("PropertyAccessibilityAmenities", b =>
                {
                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("AccessibilityAmenitiesId")
                        .HasColumnType("int");

                    b.HasKey("PropertiesPropertyId", "AccessibilityAmenitiesId");

                    b.HasIndex("AccessibilityAmenitiesId");

                    b.ToTable("PropertyAccessibilityAmenities");

                    b.HasData(
                        new
                        {
                            PropertiesPropertyId = 1,
                            AccessibilityAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 1,
                            AccessibilityAmenitiesId = 4
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            AccessibilityAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            AccessibilityAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            AccessibilityAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            AccessibilityAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            AccessibilityAmenitiesId = 10
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            AccessibilityAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            AccessibilityAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            AccessibilityAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            AccessibilityAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            AccessibilityAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            AccessibilityAmenitiesId = 4
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            AccessibilityAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            AccessibilityAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            AccessibilityAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            AccessibilityAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            AccessibilityAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            AccessibilityAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            AccessibilityAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            AccessibilityAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            AccessibilityAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            AccessibilityAmenitiesId = 8
                        });
                });

            modelBuilder.Entity("PropertyExternalAmenities", b =>
                {
                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAmenitiesId")
                        .HasColumnType("int");

                    b.HasKey("PropertiesPropertyId", "ExternalAmenitiesId");

                    b.HasIndex("ExternalAmenitiesId");

                    b.ToTable("PropertyExternalAmenities");

                    b.HasData(
                        new
                        {
                            PropertiesPropertyId = 1,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 1,
                            ExternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 1,
                            ExternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            ExternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            ExternalAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            ExternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            ExternalAmenitiesId = 10
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            ExternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            ExternalAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            ExternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            ExternalAmenitiesId = 4
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            ExternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            ExternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            ExternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            ExternalAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            ExternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            ExternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            ExternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            ExternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            ExternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            ExternalAmenitiesId = 4
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            ExternalAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            ExternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            ExternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            ExternalAmenitiesId = 10
                        });
                });

            modelBuilder.Entity("PropertyInternalAmenities", b =>
                {
                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("InternalAmenitiesId")
                        .HasColumnType("int");

                    b.HasKey("PropertiesPropertyId", "InternalAmenitiesId");

                    b.HasIndex("InternalAmenitiesId");

                    b.ToTable("PropertyInternalAmenities");

                    b.HasData(
                        new
                        {
                            PropertiesPropertyId = 1,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 1,
                            InternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 1,
                            InternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            InternalAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            InternalAmenitiesId = 4
                        },
                        new
                        {
                            PropertiesPropertyId = 2,
                            InternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 3,
                            InternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            InternalAmenitiesId = 3
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            InternalAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 4,
                            InternalAmenitiesId = 10
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            InternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            InternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            InternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 5,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 6,
                            InternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            InternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 7,
                            InternalAmenitiesId = 9
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            InternalAmenitiesId = 6
                        },
                        new
                        {
                            PropertiesPropertyId = 8,
                            InternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            InternalAmenitiesId = 2
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            InternalAmenitiesId = 5
                        },
                        new
                        {
                            PropertiesPropertyId = 9,
                            InternalAmenitiesId = 10
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            InternalAmenitiesId = 1
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            InternalAmenitiesId = 7
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            InternalAmenitiesId = 8
                        },
                        new
                        {
                            PropertiesPropertyId = 10,
                            InternalAmenitiesId = 9
                        });
                });

            modelBuilder.Entity("AmenityProperty", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.ChatMessage", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Preference", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Property", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserProperties")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.PropertyImage", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.SearchHistory", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyDocument", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Document", "Document")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyFavorite", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", "Favorite")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("FavoriteId");

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyPayment", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Payment", "Payment")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.UserPropertyReview", b =>
                {
                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", "Property")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPropertyManagmentApi.Models.Review", "Review")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("ReviewId");

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.User", "User")
                        .WithMany("UserPropertyReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyAccessibilityAmenities", b =>
                {
                    b.HasOne("DigitslPropertyManangementDAL.Data.Models.AccessibillityAmenity", null)
                        .WithMany()
                        .HasForeignKey("AccessibilityAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyExternalAmenities", b =>
                {
                    b.HasOne("DigitslPropertyManangementDAL.Data.Models.ExternalAmenity", null)
                        .WithMany()
                        .HasForeignKey("ExternalAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyInternalAmenities", b =>
                {
                    b.HasOne("DigitslPropertyManangementDAL.Data.Models.InternalAmenity", null)
                        .WithMany()
                        .HasForeignKey("InternalAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GP_DigitalPropertyManegmentApi.Data.Context.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalPropertyManagmentApi.Models.Review", b =>
                {
                    b.Navigation("UserPropertyReviews");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Document", b =>
                {
                    b.Navigation("UserPropertyDocuments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Favorite", b =>
                {
                    b.Navigation("UserPropertyFavorites");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Payment", b =>
                {
                    b.Navigation("UserPropertyPayments");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("UserPropertyDocuments");

                    b.Navigation("UserPropertyFavorites");

                    b.Navigation("UserPropertyPayments");

                    b.Navigation("UserPropertyReviews");
                });

            modelBuilder.Entity("GP_DigitalPropertyManegmentApi.Data.Context.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Preferences");

                    b.Navigation("SearchHistories");

                    b.Navigation("UserProperties");

                    b.Navigation("UserPropertyDocuments");

                    b.Navigation("UserPropertyFavorites");

                    b.Navigation("UserPropertyPayments");

                    b.Navigation("UserPropertyReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
